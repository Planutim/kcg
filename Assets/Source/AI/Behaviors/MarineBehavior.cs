//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the behavior visual tool.
//     (Warning)Changes to this file may cause incorrect behavior, but it won't be lost.
// </auto-generated>
//-------
using Enums;
using KMath;
using System.Collections.Generic;
using AI.Sensor;

namespace AI
{
    public class MarineBehavior : BehaviorBase
    {
        public override BehaviorType Type { get { return BehaviorType.Marine; } }
        
        NodeInfo Root = new NodeInfo
        {
            index = 0,
            pos = new Vec2f(579.2f, 160.8704f),
            type = NodeType.DecoratorNode,
         
            children = new List<int>(){1}
        };

        NodeInfo Child1 = new NodeInfo
        {
            index = 1,
            pos = new Vec2f(579.2f, 268.0175f),
            type = NodeType.RepeaterNode,
            children = new List<int>(){ 2},
        };

        NodeInfo Child2 = new NodeInfo
        {
            index = 2,
            pos = new Vec2f(579.2f, 388.8001f),
            type = NodeType.SelectorNode,
            children = new List<int>(){ 3, 8 },
            entriesID = new List<int>(){ 16777216}
        };

        NodeInfo Child3 = new NodeInfo
        {
            index = 3,
            pos = new Vec2f(447.9999f, 502.4f),
            type = NodeType.SequenceNode,
            children = new List<int>(){ 4,  5,  6},
        };

        NodeInfo Child4 = new NodeInfo
        {
            index = 4,
            pos = new Vec2f(248.6f, 648f),
            type = NodeType.SelectClosestTarget,
            entriesID = new List<int>(){ 67108864}
        };

        NodeInfo Child5 = new NodeInfo
        {
            index = 5,
            pos = new Vec2f(399.2f, 649.6f),
            type = NodeType.ShootFireWeaponAction,
            entriesID = new List<int>(){ 67108864}
        };

        NodeInfo Child6 = new NodeInfo
        {
            index = 6,
            pos = new Vec2f(540.8f, 648f),
            type = NodeType.WaitAction,
            entriesID = new List<int>(){ 50331648}
        };

        NodeInfo Child7 = new NodeInfo
        {
            index = 7,
            pos = new Vec2f(825.4f, 648f),
            type = NodeType.WaitAction,
            children = new List<int>(){},
            entriesID = new List<int>(){ 50331648}
        };

        NodeInfo Child8 = new NodeInfo
        {
            index = 8,
            pos = new Vec2f(750.4001f, 502.4f),
            type = NodeType.SequenceNode,
            children = new List<int>(){ 9,  7},
        };

        NodeInfo Child9 = new NodeInfo
        {
            index = 9,
            pos = new Vec2f(691f, 649.6f),
            type = NodeType.WaitAction,
            entriesID = new List<int>(){ 50331648}
        };

        public override List<NodeInfo> Nodes
        {
            get
            {
                List<NodeInfo> nodes = new List<NodeInfo>();
                nodes.Add(Root);
                nodes.Add(Child1);
                nodes.Add(Child2);
                nodes.Add(Child3);
                nodes.Add(Child4);
                nodes.Add(Child5);
                nodes.Add(Child6);
                nodes.Add(Child7);
                nodes.Add(Child8);
                nodes.Add(Child9);
                return nodes;
            }
        }
        SensorEntity EnemySensorSensor = new SensorEntity
        {
            Type = SensorType.EnemySensor,
            EntriesID = new List<int>(){ 16777216}
        };
      
        public override int SensorCount { get { return 1; } }

        public override SensorEntity[] Sensors
        {
            get
            {
                SensorEntity[] sensors = new SensorEntity[3];
                sensors[0] = EnemySensorSensor;
                return sensors;
            }
        }

        BlackBoardModel.EntryInfo Entry0 = new BlackBoardModel.EntryInfo
        {
            Name = "Wait",
            Description = "",
            ID = 50331648
        };

        BlackBoardModel.EntryInfo Entry1 = new BlackBoardModel.EntryInfo
        {
            Name = "Target",
            Description = "",
            ID = 67108864
        };

        BlackBoardModel.EntryInfo Entry2 = new BlackBoardModel.EntryInfo
        {
            Name = "EnemiesInRange",
            Description = "",
            ID = 16777216
        };
      
        public override BlackBoardModel AgentBlackboard
        {
            get
            {
                BlackBoardModel blackboard = new BlackBoardModel(Type);
                blackboard.Register(ref Entry0, (System.Int32)1);
                blackboard.Register(ref Entry1, new KMath.Vec2f(0, 0));
                blackboard.Register(ref Entry2, (System.Boolean)false);
                return blackboard;
            }
        }
    };
}

