//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Utility {
    using UnityEngine;
    using UnityEditor;
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.IO;
    using AI;
    using Utility;
    using System;
    
    
    public partial class BehaviourBuilder : BehaviourBuilderBase {
        
        private global::GameDevWare.TextTransform.Processor.ITextTemplatingEngineHost hostValue;
        
        public global::GameDevWare.TextTransform.Processor.ITextTemplatingEngineHost Host {
            get {
                return this.hostValue;
            }
            set {
                this.hostValue = value;
            }
        }
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 12 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
 
    int length = AISystemState.Behaviors.Length;
    for (int i = 1; i < length; i++)
    {

            
            #line default
            #line hidden
            
            #line 17 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("using Enums;\r\nusing KMath;\r\nusing System.Collections.Generic;\r\n\r\nnamespace AI\r\n{\r" +
                    "\n    public class ");
            
            #line default
            #line hidden
            
            #line 23 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( AISystemState.Behaviors[i].Name));
            
            #line default
            #line hidden
            
            #line 23 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("Behavior : BehaviorBase\r\n    {\r\n        public override BehaviorType Type { get {" +
                    " return BehaviorType.");
            
            #line default
            #line hidden
            
            #line 25 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( AISystemState.Behaviors[i].Name));
            
            #line default
            #line hidden
            
            #line 25 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("; } }\r\n        \r\n        NodeInfo Root = new NodeInfo\r\n        {\r\n            ind" +
                    "ex = 0,\r\n            pos = new Vec2f(");
            
            #line default
            #line hidden
            
            #line 30 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[0].pos.X));
            
            #line default
            #line hidden
            
            #line 30 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("f, ");
            
            #line default
            #line hidden
            
            #line 30 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[0].pos.Y));
            
            #line default
            #line hidden
            
            #line 30 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("f),\r\n            type = NodeType.");
            
            #line default
            #line hidden
            
            #line 31 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[0].type));
            
            #line default
            #line hidden
            
            #line 31 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(",\r\n");
            
            #line default
            #line hidden
            
            #line 32 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        if (AISystemState.Behaviors[i].Nodes[0].children != null)
        {
            if (AISystemState.Behaviors[i].Nodes[0].children.Count > 0)
            {

            
            #line default
            #line hidden
            
            #line 38 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("         \r\n            children = new List<int>(){");
            
            #line default
            #line hidden
            
            #line 39 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[0].children[0]));
            
            #line default
            #line hidden
            
            #line 39 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("}\r\n");
            
            #line default
            #line hidden
            
            #line 40 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

            }
        }

            
            #line default
            #line hidden
            
            #line 44 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("        };\r\n");
            
            #line default
            #line hidden
            
            #line 45 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        for (int j = 1; j < AISystemState.Behaviors[i].Nodes.Count; j++)
        {

            
            #line default
            #line hidden
            
            #line 49 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("\r\n        NodeInfo Child");
            
            #line default
            #line hidden
            
            #line 50 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j.ToString()));
            
            #line default
            #line hidden
            
            #line 50 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(" = new NodeInfo\r\n        {\r\n            index = ");
            
            #line default
            #line hidden
            
            #line 52 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j.ToString()));
            
            #line default
            #line hidden
            
            #line 52 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(",\r\n            pos = new Vec2f(");
            
            #line default
            #line hidden
            
            #line 53 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[j].pos.X));
            
            #line default
            #line hidden
            
            #line 53 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("f, ");
            
            #line default
            #line hidden
            
            #line 53 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[j].pos.Y));
            
            #line default
            #line hidden
            
            #line 53 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("f),\r\n            type = NodeType.");
            
            #line default
            #line hidden
            
            #line 54 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[j].type));
            
            #line default
            #line hidden
            
            #line 54 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(",\r\n");
            
            #line default
            #line hidden
            
            #line 55 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

            if (AISystemState.Behaviors[i].Nodes[j].children != null)
            {

            
            #line default
            #line hidden
            
            #line 59 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("            children = new List<int>(){");
            
            #line default
            #line hidden
            
            #line 59 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
for (int z = 0; z < AISystemState.Behaviors[i].Nodes[j].children.Count; z++){ if(z!=0){
            
            #line default
            #line hidden
            
            #line 60 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 60 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
 }
            
            #line default
            #line hidden
            
            #line 61 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 61 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AISystemState.Behaviors[i].Nodes[j].children[z]));
            
            #line default
            #line hidden
            
            #line 61 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
 }
            
            #line default
            #line hidden
            
            #line 62 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("}\r\n");
            
            #line default
            #line hidden
            
            #line 63 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

            }

            
            #line default
            #line hidden
            
            #line 66 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("        };\r\n");
            
            #line default
            #line hidden
            
            #line 67 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        }

            
            #line default
            #line hidden
            
            #line 70 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("\r\n        public override List<NodeInfo> Nodes\r\n        {\r\n            get\r\n     " +
                    "       {\r\n                List<NodeInfo> nodes = new List<NodeInfo>();\r\n        " +
                    "        nodes.Add(Root);\r\n");
            
            #line default
            #line hidden
            
            #line 77 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        for (int j = 1; j < AISystemState.Behaviors[i].Nodes.Count; j++)
        {

            
            #line default
            #line hidden
            
            #line 81 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("                nodes.Add(Child");
            
            #line default
            #line hidden
            
            #line 81 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j.ToString()));
            
            #line default
            #line hidden
            
            #line 81 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 82 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        }

            
            #line default
            #line hidden
            
            #line 85 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"
            this.Write("                return nodes;\r\n            }\r\n        }\r\n    };\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 90 "Assets\Source\Utility\Editor\Generation\BehaviourBuilder.tt"

        string outputFilePath = FileWriterManager.GetFullSourceFilePath() + "\\AI\\Behaviors";
        FileWriterManager.SaveFile(outputFilePath, AISystemState.Behaviors[i].Name + "Behavior.cs", this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Host != null)) {
                this.Host.SetFileExtension(".cs");
            }
        }
    }
    
    public class BehaviourBuilderBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
