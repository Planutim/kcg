<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="UnityEngine" #>
<#@ import namespace="UnityEditor" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="AI" #>
<#@ import namespace="Utility" #>
<#@ output extension=".cs" #>
<# 
    int length = AISystemState.Behaviors.Length;
    for (int i = 1; i < length; i++)
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the behavior visual tool.
//     (Warning)Changes to this file may cause incorrect behavior, but it won't be lost.
// </auto-generated>
//-------
using Enums;
using KMath;
using System.Collections.Generic;
using AI.Sensor;

namespace AI
{
    public class <#= AISystemState.Behaviors.Get(i).Name#>Behavior : BehaviorBase
    {
        public override BehaviorType Type { get { return BehaviorType.<#= AISystemState.Behaviors.Get(i).Name#>; } }
        
        NodeInfo Root = new NodeInfo
        {
            index = 0,
            pos = new Vec2f(<#=AISystemState.Behaviors.Get(i).Nodes[0].pos.X#>f, <#=AISystemState.Behaviors.Get(i).Nodes[0].pos.Y#>f),
            type = NodeType.<#=AISystemState.Behaviors.Get(i).Nodes[0].type#>,
<#
        if (AISystemState.Behaviors.Get(i).Nodes[0].children != null)
        {
            if (AISystemState.Behaviors.Get(i).Nodes[0].children.Count > 0)
            {
#>         
            children = new List<int>(){<#=AISystemState.Behaviors.Get(i).Nodes[0].children[0]#>}
<#
            }
        }
#>
        };
<#
        for (int j = 1; j < AISystemState.Behaviors.Get(i).Nodes.Count; j++)
        {
#>

        NodeInfo Child<#=j.ToString()#> = new NodeInfo
        {
            index = <#=j.ToString()#>,
            pos = new Vec2f(<#=AISystemState.Behaviors.Get(i).Nodes[j].pos.X#>f, <#=AISystemState.Behaviors.Get(i).Nodes[j].pos.Y#>f),
            type = NodeType.<#=AISystemState.Behaviors.Get(i).Nodes[j].type#>,
<#
            if (AISystemState.Behaviors.Get(i).Nodes[j].children != null)
            {
#>
            children = new List<int>(){<#for (int z = 0; z < AISystemState.Behaviors.Get(i).Nodes[j].children.Count; z++){ if(z!=0){#>, <# }#> <#=AISystemState.Behaviors.Get(i).Nodes[j].children[z]#><# }#>},
<#
            }
            if (AISystemState.Behaviors.Get(i).Nodes[j].entriesID != null)
            {
#>
            entriesID = new List<int>(){<#for (int z = 0; z < AISystemState.Behaviors.Get(i).Nodes[j].entriesID.Count; z++){ if(z!=0){#>, <# }#> <#=AISystemState.Behaviors.Get(i).Nodes[j].entriesID[z]#><# }#>}
<#
            }
#>
        };
<#
        }
#>

        public override List<NodeInfo> Nodes
        {
            get
            {
                List<NodeInfo> nodes = new List<NodeInfo>();
                nodes.Add(Root);
<#
        for (int j = 1; j < AISystemState.Behaviors.Get(i).Nodes.Count; j++)
        {
#>
                nodes.Add(Child<#=j.ToString()#>);
<#
        }
#>
                return nodes;
            }
        }
<#
        for (int j = 0; j < AISystemState.Behaviors.Get(i).SensorCount; j++)
        {
#>
        SensorEntity <#=AISystemState.Behaviors.Get(i).Sensors[j].Type.ToString()#>Sensor = new SensorEntity
        {
            Type = SensorType.<#=AISystemState.Behaviors.Get(i).Sensors[j].Type#>,
            EntriesID = new List<int>(){<#for (int z = 0; z < AISystemState.Behaviors.Get(i).Sensors[j].EntriesID.Count; z++){ if(z!=0){#>, <# }#> <#=AISystemState.Behaviors.Get(i).Sensors[j].EntriesID[z]#><# }#>}
        };
<#
        }
        int sensorLength = Enum.GetNames(typeof(Enums.SensorType)).Length - 1;
#>      
        public override int SensorCount { get { return <#=AISystemState.Behaviors.Get(i).SensorCount#>; } }

        public override SensorEntity[] Sensors
        {
            get
            {
                SensorEntity[] sensors = new SensorEntity[<#=sensorLength.ToString()#>];
<#
        for (int j = 0; j < AISystemState.Behaviors.Get(i).SensorCount; j++)
        {
#>
                sensors[<#=j.ToString()#>] = <#=AISystemState.Behaviors.Get(i).Sensors[j].Type.ToString()#>Sensor;
<#
        }
#>
                return sensors;
            }
        }
<#
        BlackBoardModel blackboard = AISystemState.Behaviors.Get(i).BlackBoard;
        for (int j = 0; j < AISystemState.Behaviors.Get(i).BlackBoard.Length; j++)
        {
#>

        BlackBoardModel.EntryInfo Entry<#=j.ToString()#> = new BlackBoardModel.EntryInfo
        {
            Name = "<#=blackboard.Entries[j].Name#>",
            Description = "<#=blackboard.Entries[j].Description#>",
            ID = <#=blackboard.Entries[j].ID#>
        };
<#
        }
#>      
        public override BlackBoardModel AgentBlackboard
        {
            get
            {
                BlackBoardModel blackboard = new BlackBoardModel(Type);
<#
        for (int j = 0; j < AISystemState.Behaviors.Get(i).BlackBoard.Length; j++)
        {
            ref BlackBoardModel.EntryInfo Entry = ref AISystemState.Behaviors.Get(i).BlackBoard.Entries[j];
            Type type = Entry.GetEntryType();
            if (type.Namespace == "System")
            {
#>
                blackboard.Register(ref Entry<#=j.ToString()#>, (<#=type.ToString()#>)<#=AISystemState.Behaviors.Get(i).BlackBoard.GetValue(Entry.ID).ToString().ToLower()#>);
<#
            }
            else if (type == typeof(KMath.Vec2f))
            {
                KMath.Vec2f value = (KMath.Vec2f)AISystemState.Behaviors.Get(i).BlackBoard.GetValue(Entry.ID);
#>
                blackboard.Register(ref Entry<#=j.ToString()#>, new KMath.Vec2f(<#=value.X#>, <#=value.Y#>));
<#
            }
        }
#>
                return blackboard;
            }
        }
    };
}
<#
        string outputFilePath = FileWriterManager.GetFullSourceFilePath() + "\\AI\\Behaviors";
        FileWriterManager.SaveFile(outputFilePath, AISystemState.Behaviors.Get(i).Name + "Behavior.cs", this.GenerationEnvironment.ToString()); 
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>