#pragma kernel scale_noise

  StructuredBuffer<float>       noise;
RWStructuredBuffer<float> outputnoise;
uint width;
uint height;
uint depth;
uint scale;

float smootherstep(float a, float b, float w) {
    return (b - a) * w * w * w * (w * (w * 6.0f - 15.0f) + 10.0f) + a;
}

[numthreads(4, 4, 4)]
void scale_noise(uint3 id : SV_DispatchThreadID) {
    uint  x0            = id.x   / scale;
    uint  y0            = id.y   / scale;
    uint  z0            = id.z   / scale;

    uint  scaledw       = width  / scale;
    uint  scaledh       = height / scale;
    uint  scaledd       = depth  / scale;

    float dx            = (float)(id.x % scale) / scale;
    float dy            = (float)(id.y % scale) / scale;
    float dz            = (float)(id.z % scale) / scale;

    uint  x1            = x0 + 1;
    uint  y1            = y0 + 1;
    uint  z1            = z0 + 1;

    if(x1 > scaledw) x1 = 0;
    if(y1 > scaledh) y1 = 0;
    if(z1 > scaledh) z1 = 0;
    
    float a = smootherstep(smootherstep(smootherstep(noise[x0 + y0 * scaledw + z0 * scaledw * scaledh], noise[x1 + y0 * scaledw + z0 * scaledw * scaledh], dx),
                                        smootherstep(noise[x0 + y1 * scaledw + z0 * scaledw * scaledh], noise[x1 + y1 * scaledw + z0 * scaledw * scaledh], dx),
                                                                                                                                                           dy),
                           smootherstep(smootherstep(noise[x0 + y0 * scaledw + z1 * scaledw * scaledh], noise[x1 + y0 * scaledw + z1 * scaledw * scaledh], dx),
                                        smootherstep(noise[x0 + y1 * scaledw + z1 * scaledw * scaledh], noise[x1 + y1 * scaledw + z1 * scaledw * scaledh], dx),
                                                                                                                                                           dy),
                                                                                                                                                           dz);

    // Blend onto underlying value
    outputnoise[id.x + id.y * width + id.z + width * height] = a + outputnoise[id.x + id.y * width + id.z + width * height] * (1.0f - a);
}
