//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ParticleEntity {

    public Particle.EmitterStateComponent particleEmitterState { get { return (Particle.EmitterStateComponent)GetComponent(ParticleComponentsLookup.ParticleEmitterState); } }
    public bool hasParticleEmitterState { get { return HasComponent(ParticleComponentsLookup.ParticleEmitterState); } }

    public void AddParticleEmitterState(UnityEngine.GameObject newGameObject, UnityEngine.GameObject newPrefab, float newParticleDecayRate, UnityEngine.Vector2 newParticleAcceleration, float newParticleDeltaRotation, float newParticleDeltaScale, int[] newSpriteIds, KMath.Vec2f newParticleSize, UnityEngine.Vector2 newParticleStartingVelocity, float newParticleStartingRotation, float newParticleStartingScale, UnityEngine.Color newParticleStartingColor, float newParticleAnimationSpeed, float newDuration, bool newLoop, int newParticleCount, float newTimeBetweenEmissions, float newCurrentTime) {
        var index = ParticleComponentsLookup.ParticleEmitterState;
        var component = (Particle.EmitterStateComponent)CreateComponent(index, typeof(Particle.EmitterStateComponent));
        component.GameObject = newGameObject;
        component.Prefab = newPrefab;
        component.ParticleDecayRate = newParticleDecayRate;
        component.ParticleAcceleration = newParticleAcceleration;
        component.ParticleDeltaRotation = newParticleDeltaRotation;
        component.ParticleDeltaScale = newParticleDeltaScale;
        component.SpriteIds = newSpriteIds;
        component.ParticleSize = newParticleSize;
        component.ParticleStartingVelocity = newParticleStartingVelocity;
        component.ParticleStartingRotation = newParticleStartingRotation;
        component.ParticleStartingScale = newParticleStartingScale;
        component.ParticleStartingColor = newParticleStartingColor;
        component.ParticleAnimationSpeed = newParticleAnimationSpeed;
        component.Duration = newDuration;
        component.Loop = newLoop;
        component.ParticleCount = newParticleCount;
        component.TimeBetweenEmissions = newTimeBetweenEmissions;
        component.CurrentTime = newCurrentTime;
        AddComponent(index, component);
    }

    public void ReplaceParticleEmitterState(UnityEngine.GameObject newGameObject, UnityEngine.GameObject newPrefab, float newParticleDecayRate, UnityEngine.Vector2 newParticleAcceleration, float newParticleDeltaRotation, float newParticleDeltaScale, int[] newSpriteIds, KMath.Vec2f newParticleSize, UnityEngine.Vector2 newParticleStartingVelocity, float newParticleStartingRotation, float newParticleStartingScale, UnityEngine.Color newParticleStartingColor, float newParticleAnimationSpeed, float newDuration, bool newLoop, int newParticleCount, float newTimeBetweenEmissions, float newCurrentTime) {
        var index = ParticleComponentsLookup.ParticleEmitterState;
        var component = (Particle.EmitterStateComponent)CreateComponent(index, typeof(Particle.EmitterStateComponent));
        component.GameObject = newGameObject;
        component.Prefab = newPrefab;
        component.ParticleDecayRate = newParticleDecayRate;
        component.ParticleAcceleration = newParticleAcceleration;
        component.ParticleDeltaRotation = newParticleDeltaRotation;
        component.ParticleDeltaScale = newParticleDeltaScale;
        component.SpriteIds = newSpriteIds;
        component.ParticleSize = newParticleSize;
        component.ParticleStartingVelocity = newParticleStartingVelocity;
        component.ParticleStartingRotation = newParticleStartingRotation;
        component.ParticleStartingScale = newParticleStartingScale;
        component.ParticleStartingColor = newParticleStartingColor;
        component.ParticleAnimationSpeed = newParticleAnimationSpeed;
        component.Duration = newDuration;
        component.Loop = newLoop;
        component.ParticleCount = newParticleCount;
        component.TimeBetweenEmissions = newTimeBetweenEmissions;
        component.CurrentTime = newCurrentTime;
        ReplaceComponent(index, component);
    }

    public void RemoveParticleEmitterState() {
        RemoveComponent(ParticleComponentsLookup.ParticleEmitterState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ParticleMatcher {

    static Entitas.IMatcher<ParticleEntity> _matcherParticleEmitterState;

    public static Entitas.IMatcher<ParticleEntity> ParticleEmitterState {
        get {
            if (_matcherParticleEmitterState == null) {
                var matcher = (Entitas.Matcher<ParticleEntity>)Entitas.Matcher<ParticleEntity>.AllOf(ParticleComponentsLookup.ParticleEmitterState);
                matcher.componentNames = ParticleComponentsLookup.componentNames;
                _matcherParticleEmitterState = matcher;
            }

            return _matcherParticleEmitterState;
        }
    }
}
