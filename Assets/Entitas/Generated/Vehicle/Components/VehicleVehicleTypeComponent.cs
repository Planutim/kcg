//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class VehicleEntity {

    public Vehicle.TypeComponent vehicleType { get { return (Vehicle.TypeComponent)GetComponent(VehicleComponentsLookup.VehicleType); } }
    public bool hasVehicleType { get { return HasComponent(VehicleComponentsLookup.VehicleType); } }

    public void AddVehicleType(Enums.VehicleType newType, bool newHasAgent) {
        var index = VehicleComponentsLookup.VehicleType;
        var component = (Vehicle.TypeComponent)CreateComponent(index, typeof(Vehicle.TypeComponent));
        component.Type = newType;
        component.HasAgent = newHasAgent;
        AddComponent(index, component);
    }

    public void ReplaceVehicleType(Enums.VehicleType newType, bool newHasAgent) {
        var index = VehicleComponentsLookup.VehicleType;
        var component = (Vehicle.TypeComponent)CreateComponent(index, typeof(Vehicle.TypeComponent));
        component.Type = newType;
        component.HasAgent = newHasAgent;
        ReplaceComponent(index, component);
    }

    public void RemoveVehicleType() {
        RemoveComponent(VehicleComponentsLookup.VehicleType);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class VehicleMatcher {

    static Entitas.IMatcher<VehicleEntity> _matcherVehicleType;

    public static Entitas.IMatcher<VehicleEntity> VehicleType {
        get {
            if (_matcherVehicleType == null) {
                var matcher = (Entitas.Matcher<VehicleEntity>)Entitas.Matcher<VehicleEntity>.AllOf(VehicleComponentsLookup.VehicleType);
                matcher.componentNames = VehicleComponentsLookup.componentNames;
                _matcherVehicleType = matcher;
            }

            return _matcherVehicleType;
        }
    }
}
