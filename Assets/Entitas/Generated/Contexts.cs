//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts : Entitas.IContexts {

    public static Contexts sharedInstance {
        get {
            if (_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public ActionContext action { get; set; }
    public ActionPropertiesContext actionProperties { get; set; }
    public AIContext aI { get; set; }
    public GameContext game { get; set; }
    public InputContext input { get; set; }
    public InventoryContext inventory { get; set; }
    public ItemPropertiesContext itemProperties { get; set; }
    public ParticleContext particle { get; set; }

    public Entitas.IContext[] allContexts { get { return new Entitas.IContext [] { action, actionProperties, aI, game, input, inventory, itemProperties, particle }; } }

    public Contexts() {
        action = new ActionContext();
        actionProperties = new ActionPropertiesContext();
        aI = new AIContext();
        game = new GameContext();
        input = new InputContext();
        inventory = new InventoryContext();
        itemProperties = new ItemPropertiesContext();
        particle = new ParticleContext();

        var postConstructors = System.Linq.Enumerable.Where(
            GetType().GetMethods(),
            method => System.Attribute.IsDefined(method, typeof(Entitas.CodeGeneration.Attributes.PostConstructorAttribute))
        );

        foreach (var postConstructor in postConstructors) {
            postConstructor.Invoke(this, null);
        }
    }

    public void Reset() {
        var contexts = allContexts;
        for (int i = 0; i < contexts.Length; i++) {
            contexts[i].Reset();
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EntityIndexGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

    public const string ActionIDID = "ActionIDID";
    public const string ActionIDTypeID = "ActionIDTypeID";
    public const string ActionItem = "ActionItem";
    public const string ActionProperty = "ActionProperty";
    public const string ActionPropertyName = "ActionPropertyName";
    public const string AgentAIController = "AgentAIController";
    public const string AgentID = "AgentID";
    public const string AIGoal = "AIGoal";
    public const string InventoryID = "InventoryID";
    public const string ItemAttachedInventory = "ItemAttachedInventory";
    public const string ItemAttributeAction = "ItemAttributeAction";
    public const string ItemAttributes = "ItemAttributes";
    public const string ItemIDID = "ItemIDID";
    public const string ItemIDItemType = "ItemIDItemType";
    public const string ParticleEmitterID = "ParticleEmitterID";
    public const string ProjectileID = "ProjectileID";
    public const string VehicleID = "VehicleID";

    [Entitas.CodeGeneration.Attributes.PostConstructor]
    public void InitializeEntityIndices() {
        action.AddEntityIndex(new Entitas.PrimaryEntityIndex<ActionEntity, int>(
            ActionIDID,
            action.GetGroup(ActionMatcher.ActionID),
            (e, c) => ((Action.IDComponent)c).ID));

        action.AddEntityIndex(new Entitas.EntityIndex<ActionEntity, int>(
            ActionIDTypeID,
            action.GetGroup(ActionMatcher.ActionID),
            (e, c) => ((Action.IDComponent)c).TypeID));

        action.AddEntityIndex(new Entitas.PrimaryEntityIndex<ActionEntity, int>(
            ActionItem,
            action.GetGroup(ActionMatcher.ActionItem),
            (e, c) => ((Action.ItemComponent)c).ItemID));

        actionProperties.AddEntityIndex(new Entitas.PrimaryEntityIndex<ActionPropertiesEntity, int>(
            ActionProperty,
            actionProperties.GetGroup(ActionPropertiesMatcher.ActionProperty),
            (e, c) => ((Action.Property.Component)c).TypeID));

        actionProperties.AddEntityIndex(new Entitas.PrimaryEntityIndex<ActionPropertiesEntity, string>(
            ActionPropertyName,
            actionProperties.GetGroup(ActionPropertiesMatcher.ActionPropertyName),
            (e, c) => ((Action.Property.NameComponent)c).TypeName));

        game.AddEntityIndex(new Entitas.PrimaryEntityIndex<GameEntity, int>(
            AgentAIController,
            game.GetGroup(GameMatcher.AgentAIController),
            (e, c) => ((Agent.AIController)c).AgentPlannerID));

        game.AddEntityIndex(new Entitas.PrimaryEntityIndex<GameEntity, int>(
            AgentID,
            game.GetGroup(GameMatcher.AgentID),
            (e, c) => ((Agent.IDComponent)c).ID));

        aI.AddEntityIndex(new Entitas.PrimaryEntityIndex<AIEntity, int>(
            AIGoal,
            aI.GetGroup(AIMatcher.AIGoal),
            (e, c) => ((AI.GoalComponent)c).GoalID));

        inventory.AddEntityIndex(new Entitas.PrimaryEntityIndex<InventoryEntity, int>(
            InventoryID,
            inventory.GetGroup(InventoryMatcher.InventoryID),
            (e, c) => ((Inventory.IDComponent)c).ID));

        game.AddEntityIndex(new Entitas.EntityIndex<GameEntity, int>(
            ItemAttachedInventory,
            game.GetGroup(GameMatcher.ItemAttachedInventory),
            (e, c) => ((Item.AttachedInventoryComponent)c).InventoryID));

        itemProperties.AddEntityIndex(new Entitas.EntityIndex<ItemPropertiesEntity, int>(
            ItemAttributeAction,
            itemProperties.GetGroup(ItemPropertiesMatcher.ItemAttributeAction),
            (e, c) => ((Item.Attribute.ActionComponent)c).ActionTypeID));

        itemProperties.AddEntityIndex(new Entitas.PrimaryEntityIndex<ItemPropertiesEntity, Enums.ItemType>(
            ItemAttributes,
            itemProperties.GetGroup(ItemPropertiesMatcher.ItemAttributes),
            (e, c) => ((Item.Attributes.Component)c).ItemType));

        game.AddEntityIndex(new Entitas.PrimaryEntityIndex<GameEntity, int>(
            ItemIDID,
            game.GetGroup(GameMatcher.ItemID),
            (e, c) => ((Item.IDComponent)c).ID));

        game.AddEntityIndex(new Entitas.EntityIndex<GameEntity, Enums.ItemType>(
            ItemIDItemType,
            game.GetGroup(GameMatcher.ItemID),
            (e, c) => ((Item.IDComponent)c).ItemType));

        particle.AddEntityIndex(new Entitas.PrimaryEntityIndex<ParticleEntity, int>(
            ParticleEmitterID,
            particle.GetGroup(ParticleMatcher.ParticleEmitterID),
            (e, c) => ((Particle.EmitterIDComponent)c).ParticleEmitterId));

        game.AddEntityIndex(new Entitas.PrimaryEntityIndex<GameEntity, int>(
            ProjectileID,
            game.GetGroup(GameMatcher.ProjectileID),
            (e, c) => ((Projectile.IDComponent)c).ID));

        game.AddEntityIndex(new Entitas.PrimaryEntityIndex<GameEntity, int>(
            VehicleID,
            game.GetGroup(GameMatcher.VehicleID),
            (e, c) => ((Vehicle.IDComponent)c).ID));
    }
}

public static class ContextsExtensions {

    public static ActionEntity GetEntityWithActionIDID(this ActionContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<ActionEntity, int>)context.GetEntityIndex(Contexts.ActionIDID)).GetEntity(ID);
    }

    public static System.Collections.Generic.HashSet<ActionEntity> GetEntitiesWithActionIDTypeID(this ActionContext context, int TypeID) {
        return ((Entitas.EntityIndex<ActionEntity, int>)context.GetEntityIndex(Contexts.ActionIDTypeID)).GetEntities(TypeID);
    }

    public static ActionEntity GetEntityWithActionItem(this ActionContext context, int ItemID) {
        return ((Entitas.PrimaryEntityIndex<ActionEntity, int>)context.GetEntityIndex(Contexts.ActionItem)).GetEntity(ItemID);
    }

    public static ActionPropertiesEntity GetEntityWithActionProperty(this ActionPropertiesContext context, int TypeID) {
        return ((Entitas.PrimaryEntityIndex<ActionPropertiesEntity, int>)context.GetEntityIndex(Contexts.ActionProperty)).GetEntity(TypeID);
    }

    public static ActionPropertiesEntity GetEntityWithActionPropertyName(this ActionPropertiesContext context, string TypeName) {
        return ((Entitas.PrimaryEntityIndex<ActionPropertiesEntity, string>)context.GetEntityIndex(Contexts.ActionPropertyName)).GetEntity(TypeName);
    }

    public static GameEntity GetEntityWithAgentAIController(this GameContext context, int AgentPlannerID) {
        return ((Entitas.PrimaryEntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.AgentAIController)).GetEntity(AgentPlannerID);
    }

    public static GameEntity GetEntityWithAgentID(this GameContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.AgentID)).GetEntity(ID);
    }

    public static AIEntity GetEntityWithAIGoal(this AIContext context, int GoalID) {
        return ((Entitas.PrimaryEntityIndex<AIEntity, int>)context.GetEntityIndex(Contexts.AIGoal)).GetEntity(GoalID);
    }

    public static InventoryEntity GetEntityWithInventoryID(this InventoryContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<InventoryEntity, int>)context.GetEntityIndex(Contexts.InventoryID)).GetEntity(ID);
    }

    public static System.Collections.Generic.HashSet<GameEntity> GetEntitiesWithItemAttachedInventory(this GameContext context, int InventoryID) {
        return ((Entitas.EntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.ItemAttachedInventory)).GetEntities(InventoryID);
    }

    public static System.Collections.Generic.HashSet<ItemPropertiesEntity> GetEntitiesWithItemAttributeAction(this ItemPropertiesContext context, int ActionTypeID) {
        return ((Entitas.EntityIndex<ItemPropertiesEntity, int>)context.GetEntityIndex(Contexts.ItemAttributeAction)).GetEntities(ActionTypeID);
    }

    public static ItemPropertiesEntity GetEntityWithItemAttributes(this ItemPropertiesContext context, Enums.ItemType ItemType) {
        return ((Entitas.PrimaryEntityIndex<ItemPropertiesEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemAttributes)).GetEntity(ItemType);
    }

    public static GameEntity GetEntityWithItemIDID(this GameContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.ItemIDID)).GetEntity(ID);
    }

    public static System.Collections.Generic.HashSet<GameEntity> GetEntitiesWithItemIDItemType(this GameContext context, Enums.ItemType ItemType) {
        return ((Entitas.EntityIndex<GameEntity, Enums.ItemType>)context.GetEntityIndex(Contexts.ItemIDItemType)).GetEntities(ItemType);
    }

    public static ParticleEntity GetEntityWithParticleEmitterID(this ParticleContext context, int ParticleEmitterId) {
        return ((Entitas.PrimaryEntityIndex<ParticleEntity, int>)context.GetEntityIndex(Contexts.ParticleEmitterID)).GetEntity(ParticleEmitterId);
    }

    public static GameEntity GetEntityWithProjectileID(this GameContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.ProjectileID)).GetEntity(ID);
    }

    public static GameEntity GetEntityWithVehicleID(this GameContext context, int ID) {
        return ((Entitas.PrimaryEntityIndex<GameEntity, int>)context.GetEntityIndex(Contexts.VehicleID)).GetEntity(ID);
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.VisualDebugging.CodeGeneration.Plugins.ContextObserverGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class Contexts {

#if (!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)

    [Entitas.CodeGeneration.Attributes.PostConstructor]
    public void InitializeContextObservers() {
        try {
            CreateContextObserver(action);
            CreateContextObserver(actionProperties);
            CreateContextObserver(aI);
            CreateContextObserver(game);
            CreateContextObserver(input);
            CreateContextObserver(inventory);
            CreateContextObserver(itemProperties);
            CreateContextObserver(particle);
        } catch(System.Exception) {
        }
    }

    public void CreateContextObserver(Entitas.IContext context) {
        if (UnityEngine.Application.isPlaying) {
            var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);
            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
        }
    }

#endif
}
