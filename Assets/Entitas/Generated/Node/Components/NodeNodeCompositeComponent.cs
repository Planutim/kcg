//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeEntity {

    public Node.CompositeComponent nodeComposite { get { return (Node.CompositeComponent)GetComponent(NodeComponentsLookup.NodeComposite); } }
    public bool hasNodeComposite { get { return HasComponent(NodeComponentsLookup.NodeComposite); } }

    public void AddNodeComposite(System.Collections.Generic.List<int> newChildren, int newCurrentID) {
        var index = NodeComponentsLookup.NodeComposite;
        var component = (Node.CompositeComponent)CreateComponent(index, typeof(Node.CompositeComponent));
        component.Children = newChildren;
        component.CurrentID = newCurrentID;
        AddComponent(index, component);
    }

    public void ReplaceNodeComposite(System.Collections.Generic.List<int> newChildren, int newCurrentID) {
        var index = NodeComponentsLookup.NodeComposite;
        var component = (Node.CompositeComponent)CreateComponent(index, typeof(Node.CompositeComponent));
        component.Children = newChildren;
        component.CurrentID = newCurrentID;
        ReplaceComponent(index, component);
    }

    public void RemoveNodeComposite() {
        RemoveComponent(NodeComponentsLookup.NodeComposite);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeMatcher {

    static Entitas.IMatcher<NodeEntity> _matcherNodeComposite;

    public static Entitas.IMatcher<NodeEntity> NodeComposite {
        get {
            if (_matcherNodeComposite == null) {
                var matcher = (Entitas.Matcher<NodeEntity>)Entitas.Matcher<NodeEntity>.AllOf(NodeComponentsLookup.NodeComposite);
                matcher.componentNames = NodeComponentsLookup.componentNames;
                _matcherNodeComposite = matcher;
            }

            return _matcherNodeComposite;
        }
    }
}
