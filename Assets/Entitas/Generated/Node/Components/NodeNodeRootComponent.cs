//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NodeEntity {

    static readonly Node.RootComponent nodeRootComponent = new Node.RootComponent();

    public bool isNodeRoot {
        get { return HasComponent(NodeComponentsLookup.NodeRoot); }
        set {
            if (value != isNodeRoot) {
                var index = NodeComponentsLookup.NodeRoot;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : nodeRootComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NodeMatcher {

    static Entitas.IMatcher<NodeEntity> _matcherNodeRoot;

    public static Entitas.IMatcher<NodeEntity> NodeRoot {
        get {
            if (_matcherNodeRoot == null) {
                var matcher = (Entitas.Matcher<NodeEntity>)Entitas.Matcher<NodeEntity>.AllOf(NodeComponentsLookup.NodeRoot);
                matcher.componentNames = NodeComponentsLookup.componentNames;
                _matcherNodeRoot = matcher;
            }

            return _matcherNodeRoot;
        }
    }
}
